name: On Push to Main Branch

on:
  push:
    branches:
      - main

concurrency:
  group: deployment
  cancel-in-progress: true

jobs:
  check-changesets:
    runs-on: ubuntu-latest
    outputs:
      hasChangesets: ${{ steps.changeset-check.outputs.hasChangesets }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.12.1
      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      - name: Check for changesets
        id: changeset-check
        run: |
          if [ -n "$(ls .changeset/*.md 2>/dev/null | grep -v 'README.md' | grep -v 'config.json')" ]; then
            echo "hasChangesets=true" >> $GITHUB_OUTPUT
          else
            echo "hasChangesets=false" >> $GITHUB_OUTPUT
          fi

  create-release-pr:
    name: Create or update Release PR
    runs-on: ubuntu-latest
    needs: check-changesets
    if: needs.check-changesets.outputs.hasChangesets == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.12.1
      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      - name: Create or update Release PR
        uses: changesets/action@v1
        with:
          publish: false
          title: "Release packages"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # publish-packages:
  #   name: Publish packages to npm
  #   runs-on: ubuntu-latest
  #   needs: check-changesets
  #   if: needs.check-changesets.outputs.hasChangesets == 'false'
  #   permissions:
  #     contents: write
  #     id-token: write
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4
  #       with:
  #         fetch-depth: 0
  #     - name: Setup Node.js and npm auth
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: '22'
  #         registry-url: 'https://registry.npmjs.org'
  #     - name: Install pnpm
  #       uses: pnpm/action-setup@v4
  #       with:
  #         version: 10.12.1
  #     - name: Get pnpm store directory
  #       shell: bash
  #       run: |
  #         echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
  #     - name: Setup pnpm cache
  #       uses: actions/cache@v4
  #       with:
  #         path: ${{ env.STORE_PATH }}
  #         key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
  #         restore-keys: |
  #           ${{ runner.os }}-pnpm-store-
  #     - name: Install dependencies
  #       run: pnpm install --frozen-lockfile
  #     - name: Run tests
  #       run: pnpm run test:ci
  #     - name: Build packages
  #       run: pnpm run build
  #     - name: Publish packages
  #       uses: changesets/action@v1
  #       with:
  #         publish: pnpm run publish
  #         title: "Release packages"
  #         createGithubReleases: true
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #         NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
